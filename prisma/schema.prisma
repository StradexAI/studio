// prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ============================================
// AUTHENTICATION & USERS
// ============================================

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  name          String?
  passwordHash  String?   // For email/password auth
  role          UserRole  @default(CONSULTANT)
  
  // OAuth fields
  image         String?
  emailVerified DateTime?
  
  // Account info
  accounts      Account[]
  sessions      Session[]
  
  // Relationships
  projects      Project[]
  
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  @@map("users")
}

enum UserRole {
  CONSULTANT
  ADMIN
}

// NextAuth required models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("sessions")
}

// ============================================
// CORE BUSINESS MODELS
// ============================================

model Project {
  id          String   @id @default(cuid())
  
  // Basic info
  clientName        String
  clientEmail       String
  clientContactName String?
  status            ProjectStatus @default(DISCOVERY)
  
  // Discovery
  discoveryToken    String  @unique  // Used for /discover/[token] link
  discoveryResponse DiscoveryResponse?
  
  // Analysis (AI-generated, consultant-reviewed)
  analysis          Analysis?
  
  // Proposal
  proposal          Proposal?
  
  // Metadata
  consultantId      String
  consultant        User     @relation(fields: [consultantId], references: [id])
  
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  @@index([consultantId])
  @@index([discoveryToken])
  @@map("projects")
}

enum ProjectStatus {
  DISCOVERY           // Client hasn't completed discovery yet
  PENDING_REVIEW      // Discovery complete, awaiting consultant review
  ANALYSIS_GENERATED  // Analysis generated, awaiting consultant review
  ANALYSIS_REVIEWED   // Analysis reviewed and approved
  PROPOSAL_DRAFT      // Consultant is working on proposal
  PROPOSAL_SENT       // Proposal sent to client
  CONTRACTED          // Client signed contract
  IN_PROGRESS         // Implementation in progress
  DEPLOYED            // Agent deployed to production
  COMPLETED           // Project complete
  CANCELLED           // Project cancelled
}

model DiscoveryResponse {
  id        String   @id @default(cuid())
  projectId String   @unique
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  
  // Section 1: The Basics
  companyName         String
  contactName         String
  contactEmail        String
  contactRole         String
  companySize         String?
  industry            String?
  
  // Section 2: Pain Points (NEW - structured as JSON)
  painPoints          Json?     // Array of {department, description, frequency, cost}
  
  // Section 3: Common Questions (NEW - structured as JSON)
  commonQuestions     Json?     // Array of strings (10-15 questions)
  
  // Section 4: Real Conversations (NEW - structured as JSON)
  realConversations   Json?     // Array of {trigger, conversation, outcome, duration}
  
  // Section 5: Volume & Staffing (REVISED - structured as JSON)
  volumeMetrics       Json?     // {phone, email, chat, forms, social, inPerson, other}
  staffingInfo        Json?     // {numPeople, percentRepetitive, avgResponseTime, avgCostPerEmployee}
  
  // Section 6: Channels (REVISED)
  currentChannels     String[]
  desiredChannels     String[]  // NEW - where they want AI agents deployed
  
  // Section 7: Salesforce Environment (REVISED)
  usesSalesforce      String
  salesforceProducts  String[]
  salesforceEdition   String?   // NEW
  existingAutomation  String[]  // NEW
  dataLocations       String[]  // Renamed from dataStorageLocations
  teamSkillLevel      String?   // NEW
  
  // Section 8: Current Workflows (NEW - structured as JSON)
  currentWorkflow     Json?     // {steps: [], systemsTouched, dataLookedUp, whatGetsUpdated}
  
  // Section 9: Success Criteria (REVISED)
  topGoals            String[]  // NEW - top 3 selected goals
  successDescription  String?   @db.Text  // NEW - what success looks like in 6 months
  successMetrics      String?   @db.Text  // NEW - how they'll measure success
  
  // Section 10: Budget & Timeline (REVISED)
  timeline            String?
  implementationBudget String?  // NEW
  monthlyBudget       String?   // NEW
  
  // Section 11: Special Requirements (REVISED)
  technicalRequirements String? @db.Text
  concerns            String[]
  
  // Section 12: Final Details
  additionalContext   String?   @db.Text
  referralSource      String?
  wantsConsultation   String
  
  // Metadata
  status              ResponseStatus @default(IN_PROGRESS)
  currentSection      Int @default(1)
  completedAt         DateTime?
  
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  
  @@map("discovery_responses")
}

enum ResponseStatus {
  IN_PROGRESS
  COMPLETED
  PROPOSAL_GENERATED
}

model Analysis {
  id        String   @id @default(cuid())
  projectId String   @unique
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  
  // Overall Agentforce Fit Assessment
  opportunityScore      Int      // 0-100
  agentforceFitScore    Int      // 0-100 - how well suited for Agentforce
  
  // Three Use Cases (stored as JSON array)
  useCases              Json     // Array of 3 use case objects with full details
  
  // Agentforce Platform Requirements
  platformRequirements  Json     // Salesforce products, Data Cloud needs, etc.
  
  // Cost Estimates (aggregate across 3 use cases)
  estimatedImplementationCost Int
  estimatedMonthlyCost        Int
  estimatedAnnualCost         Int
  
  // ROI Projections
  currentAnnualCost     Int?
  projectedYear1Savings Int?
  paybackMonths         Float?
  threeYearRoi          Float?
  
  // Consultant Review
  consultantReviewed    Boolean  @default(false)
  consultantNotes       String?  @db.Text
  customizations        Json?
  
  // Metadata
  generatedAt           DateTime @default(now())
  reviewedAt            DateTime?
  
  @@map("analysis_results")
}

model Proposal {
  id        String   @id @default(cuid())
  projectId String   @unique
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  
  // Proposal Content (JSON for flexibility)
  executiveSummary   Json
  architecture       Json
  timeline           Json
  pricingOptions     Json     // Array of pricing tiers
  caseStudies        Json     // Selected case studies
  terms              Json
  
  // Status
  status             ProposalStatus @default(DRAFT)
  
  // File Generation
  pdfGenerated       Boolean  @default(false)
  pdfUrl             String?  // Vercel Blob URL
  
  // Client Interaction
  sentToClientAt     DateTime?
  viewedByClientAt   DateTime?
  clientFeedback     String?  @db.Text
  
  // Metadata
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  
  @@map("proposals")
}

enum ProposalStatus {
  DRAFT
  READY_TO_SEND
  SENT
  VIEWED
  ACCEPTED
  REJECTED
}

model GeneratedFile {
  id          String   @id @default(cuid())
  projectId   String
  
  // File details
  fileName    String
  fileType    String   // "proposal_pdf", "architecture_diagram", etc
  fileUrl     String   // Vercel Blob URL
  fileSize    Int      // bytes
  mimeType    String
  
  // Metadata
  generatedAt DateTime @default(now())
  
  @@index([projectId])
  @@map("generated_files")
}

// ============================================
// AUDIT & LOGGING
// ============================================

model AuditLog {
  id          String   @id @default(cuid())
  
  // What happened
  action      String   // "project_created", "discovery_submitted", etc
  entityType  String   // "project", "proposal", etc
  entityId    String
  
  // Who did it
  userId      String?
  ipAddress   String?
  userAgent   String?
  
  // Additional data
  metadata    Json?
  
  // When
  createdAt   DateTime @default(now())
  
  @@index([entityType, entityId])
  @@index([userId])
  @@map("audit_logs")
}