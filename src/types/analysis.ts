export interface AgentforceUseCase {
  name: string;
  description: string;
  priority: "high" | "medium" | "low";
  channels: string[];
  topics: AgentforceTopic[];
  actions: AgentforceAction[];
  variables: AgentforceVariable[];
  integrations: AgentforceIntegration[];
  sampleConversations: SampleConversation[];
  pricing: UseCasePricing;
}

export interface AgentforceTopic {
  name: string;
  displayName: string;
  description: string;
}

export interface AgentforceAction {
  name: string;
  type: "flow" | "apex";
  description: string;
}

export interface AgentforceVariable {
  name: string;
  type: "string" | "boolean" | "number";
  description: string;
}

export interface AgentforceIntegration {
  system: string;
  required: boolean;
  complexity: "low" | "medium" | "high";
  notes?: string;
}

export interface SampleConversation {
  scenario: string;
  conversation: ConversationTurn[];
}

export interface ConversationTurn {
  speaker: "Customer" | "Agent";
  message: string;
}

export interface UseCasePricing {
  implementationCost: number;
  monthlyConversationVolume: number;
  avgActionsPerConversation: number;
  monthlyAgentforceCost: number;
}

export interface PlatformRequirements {
  salesforceProducts: string[];
  dataCloudRequired: boolean;
  dataCloudReason?: string;
  agentforceEdition: "Flex" | "Unlimited";
}

export interface ClaudeAgentforceResponse {
  opportunityScore: number;
  agentforceFitScore: number;
  platformRequirements: PlatformRequirements;
  useCases: AgentforceUseCase[];
  costEstimates: {
    totalImplementation: number;
    monthlyPlatformCost: number;
    annualPlatformCost: number;
  };
  roiProjections: {
    currentAnnualCost: number;
    projectedYear1Savings: number;
    paybackMonths: number;
    threeYearRoi: number;
  };
}

// Legacy interfaces for backward compatibility

/**
 * Discovery Form Response
 * This is the data structure collected from clients during the discovery phase
 */
export interface DiscoveryResponse {
  // Section 1: Company & Contact Information
  companyName?: string;
  contactName?: string;
  contactEmail?: string;
  contactRole?: string;

  // Section 2: Department & Use Case
  primaryDepartment?: string;
  useCases?: string[]; // Array of selected use cases
  visionDescription?: string;

  // Section 3: Business Objectives
  primaryObjective?: string;
  automationTarget?: string;
  successDefinition?: string;
  currentMetrics?: string;

  // Section 4: Current Process
  currentChannels?: string[];
  monthlyVolume?: string;
  painPoints?: string;
  commonQuestions?: string;

  // Section 5: Technical Context
  usesSalesforce?: string;
  salesforceProducts?: string[];
  dataStorageLocations?: string[];
  systemsToIntegrate?: string;

  // Section 6: Success Criteria & Constraints
  targetLaunchDate?: string;
  budgetRange?: string;
  requirements?: string;

  // Section 7: Additional Context
  concerns?: string[];
  referralSource?: string;
  additionalContext?: string;
  wantsConsultation?: string;
  bestTimeToReach?: string;

  // Legacy fields for backward compatibility
  industry?: string;
  companySize?: string;
  currentProcesses?: string;
  manualTasks?: string;
  timeSpentOnTasks?: string;
  businessGoals?: string;
  expectedOutcomes?: string;
  successMetrics?: string;
  currentSystems?: string;
  dataAvailability?: string;
  technicalConstraints?: string;
  budget?: string;
  timeline?: string;
  priorityLevel?: string;
  additionalInfo?: string;
  specificRequirements?: string;
}

/**
 * Scoring Breakdown
 * Four key metrics that determine the overall opportunity score
 */
export interface ScoringBreakdown {
  automationPotential: number; // 0-100: How much work can be automated
  costSavings: number; // 0-100: Potential for cost reduction
  implementationComplexity: number; // 0-100: Higher = easier to implement
  businessImpact: number; // 0-100: Strategic value to business
}

/**
 * Analysis Data Structure
 * Complete analysis generated by Claude and editable by consultants
 */
export interface Analysis {
  id: string;
  projectId: string;

  // Scoring
  opportunityScore: number; // 0-100: Overall opportunity rating
  scoringBreakdown: ScoringBreakdown;

  // Qualitative Analysis
  aiInsights: string; // Multi-paragraph analysis
  recommendedTopics: string[]; // Topics for AI agent training
  recommendedActions: string[]; // Implementation steps

  // Financial Projections
  estimatedImplementationCost: number; // One-time setup cost
  estimatedMonthlyCost: number; // Ongoing monthly costs
  projectedYear1Savings: number; // First year savings
  paybackMonths: number; // Months to ROI positive

  // Metadata
  consultantReviewed: boolean; // Has consultant reviewed and approved
  generatedAt: Date;
  updatedAt?: Date;
}

/**
 * Project Information
 * Core project data including client details and status
 */
export interface Project {
  id: string;
  clientName: string;
  clientEmail: string;
  status: ProjectStatus;
  discoveryResponse?: DiscoveryResponse;
  createdAt: Date;
  updatedAt: Date;
}

/**
 * Project Status Types
 */
export type ProjectStatus =
  | "Discovery Sent"
  | "Discovery Completed"
  | "Analysis Generated"
  | "Analysis Reviewed"
  | "Proposal Generated"
  | "Proposal Sent"
  | "Proposal Accepted"
  | "Proposal Declined"
  | "Project Active"
  | "Project Completed";

/**
 * API Response Types
 */
export interface ApiResponse<T> {
  data?: T;
  error?: string;
  message?: string;
}

export interface AnalysisGenerationRequest {
  projectId: string;
}

export interface AnalysisUpdateRequest extends Partial<Analysis> {
  consultantReviewed?: boolean;
}

/**
 * Claude API Types
 */
export interface ClaudeMessage {
  role: "user" | "assistant";
  content: string;
}

export interface ClaudeAPIRequest {
  model: string;
  max_tokens: number;
  temperature?: number;
  messages: ClaudeMessage[];
}

export interface ClaudeAPIResponse {
  id: string;
  type: string;
  role: string;
  content: Array<{
    type: string;
    text: string;
  }>;
  model: string;
  stop_reason: string;
  usage: {
    input_tokens: number;
    output_tokens: number;
  };
}

/**
 * Form Validation Types
 */
export interface ValidationError {
  field: string;
  message: string;
}

/**
 * Helper function to validate discovery response
 */
export function validateDiscoveryResponse(
  data: Partial<DiscoveryResponse>
): ValidationError[] {
  const errors: ValidationError[] = [];

  // Required fields
  if (!data.companyName?.trim()) {
    errors.push({ field: "companyName", message: "Company name is required" });
  }

  if (!data.industry?.trim()) {
    errors.push({ field: "industry", message: "Industry is required" });
  }

  if (!data.currentProcesses?.trim()) {
    errors.push({
      field: "currentProcesses",
      message: "Current processes description is required",
    });
  }

  if (!data.painPoints?.trim()) {
    errors.push({ field: "painPoints", message: "Pain points are required" });
  }

  if (!data.businessGoals?.trim()) {
    errors.push({
      field: "businessGoals",
      message: "Business goals are required",
    });
  }

  return errors;
}

/**
 * Helper function to calculate opportunity score from breakdown
 */
export function calculateOpportunityScore(breakdown: ScoringBreakdown): number {
  const scores = [
    breakdown.automationPotential,
    breakdown.costSavings,
    breakdown.implementationComplexity,
    breakdown.businessImpact,
  ];

  const average = scores.reduce((sum, score) => sum + score, 0) / scores.length;
  return Math.round(average);
}

/**
 * Helper function to get score label
 */
export function getScoreLabel(score: number): string {
  if (score >= 80) return "High Opportunity";
  if (score >= 60) return "Medium Opportunity";
  return "Low Opportunity";
}

/**
 * Helper function to get score color
 */
export function getScoreColor(score: number): {
  text: string;
  bg: string;
} {
  if (score >= 80) return { text: "text-green-600", bg: "bg-green-100" };
  if (score >= 60) return { text: "text-yellow-600", bg: "bg-yellow-100" };
  return { text: "text-red-600", bg: "bg-red-100" };
}

/**
 * Sample Discovery Response for Testing
 */
export const sampleDiscoveryResponse: DiscoveryResponse = {
  companyName: "TechCorp Solutions",
  industry: "Software Development",
  companySize: "50-100 employees",
  currentProcesses:
    "Manual code review, ticket triaging, documentation updates, customer support responses",
  painPoints:
    "High time spent on repetitive tasks, slow response times to customers, inconsistent documentation",
  manualTasks:
    "Code reviews take 2-3 hours per PR, ticket classification takes 30 mins per batch, documentation updates take 4 hours weekly",
  timeSpentOnTasks:
    "Approximately 20 hours per week across the team on these repetitive tasks",
  businessGoals:
    "Reduce operational costs, improve response times, scale without proportional headcount growth",
  expectedOutcomes:
    "50% reduction in time spent on manual tasks, faster customer response times, more consistent quality",
  successMetrics:
    "Time saved per week, customer satisfaction scores, documentation coverage percentage",
  currentSystems: "GitHub, Jira, Confluence, Zendesk, Slack",
  dataAvailability:
    "All systems have APIs, historical data available for past 2 years",
  technicalConstraints:
    "Must integrate with existing tools, need SOC2 compliance, prefer cloud-based solutions",
  budget: "$50,000-$100,000 for implementation, $5,000-$10,000 monthly ongoing",
  timeline: "3-4 months for initial implementation",
  priorityLevel: "High - looking to implement within next quarter",
  additionalInfo:
    "Team is tech-savvy and open to AI solutions. Have used some automation tools before.",
  specificRequirements:
    "Need training for team members, want phased rollout approach, require detailed ROI tracking",
};
